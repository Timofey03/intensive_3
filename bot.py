import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

# üìå –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
GITHUB_TEST_XLSX_URL = "https://github.com/samoletpanfilov/reinforcement_task/raw/master/data/test.xlsx"
original_data = pd.read_excel(GITHUB_TEST_XLSX_URL)
predicted_data = pd.read_excel("test.xlsx")

original_data["dt"] = pd.to_datetime(original_data["dt"])
predicted_data["dt"] = pd.to_datetime(predicted_data["dt"])

merged_data = original_data[["dt", "–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"]].merge(
    predicted_data[["dt", "predicted_price", "N"]], on="dt", how="inner"
)
data_dict = merged_data.set_index("dt").to_dict("index")

# üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤
available_months = merged_data["dt"].dt.to_period("M").unique()
available_months = [str(month) for month in available_months]

# üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –ø–æ –º–µ—Å—è—Ü–∞–º
dates_by_month = {month: merged_data[merged_data["dt"].dt.to_period("M") == month]["dt"].dt.strftime("%d-%m-%Y").tolist() for month in available_months}

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [[InlineKeyboardButton(month, callback_data=month)] for month in available_months]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")])  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=reply_markup)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
async def month_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    selected_month = query.data

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    available_dates = dates_by_month[selected_month]

    keyboard = [[InlineKeyboardButton(date, callback_data=date)] for date in available_dates]
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_month")])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Å—è—Ü {selected_month}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
async def date_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    selected_date = pd.to_datetime(query.data, format="%d-%m-%Y")

    if selected_date not in data_dict:
        await query.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        return

    real_price = data_dict[selected_date]["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"]
    predicted_price = data_dict[selected_date]["predicted_price"]
    predicted_weeks = data_dict[selected_date]["N"]

    text = (
        f"üìÖ –î–∞—Ç–∞: {query.data}\n"
        f"üí∞ –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {real_price:.2f} —Ä—É–±.\n"
        f"üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã: {predicted_price:.2f} —Ä—É–±.\n"
        f"üõí –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∑–∞–∫—É–ø–∏—Ç—å –Ω–∞: {predicted_weeks:.0f} –Ω–µ–¥–µ–ª—å."
    )

    await query.message.reply_text(text)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    await send_plot(update, context, selected_date)

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
async def send_plot(update: Update, context: CallbackContext, selected_date: pd.Timestamp) -> None:
    y_true = merged_data["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"]
    y_pred_price = merged_data["predicted_price"]

    plt.figure(figsize=(12, 6))
    plt.plot(merged_data["dt"], y_true, label="–†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", marker="o")
    plt.plot(merged_data["dt"], y_pred_price, label="–ü—Ä–æ–≥–Ω–æ–∑", marker="s", linestyle="dashed")
    plt.axvline(selected_date, color='r', linestyle='--', label="–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞")
    plt.scatter([selected_date], [data_dict[selected_date]["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"]], color='blue', s=100, zorder=3)
    plt.scatter([selected_date], [data_dict[selected_date]["predicted_price"]], color='green', s=100, zorder=3)
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶–µ–Ω–∞")
    plt.title("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)

    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=buf)
    buf.close()

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back(update: Update, context: CallbackContext) -> None:
    query = update.callback_query

    if query.data == "back_month":  # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞ —à–∞–≥–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        keyboard = [[InlineKeyboardButton(month, callback_data=month)] for month in available_months]
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")])  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=reply_markup)

    elif query.data == "cancel":  # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å"
        await query.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    TOKEN = "8000005967:AAH4nDUrBQ1mJLN1zb0XkBNbOvDS6t0_4mA"  # üî• –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(month_button, pattern="^(\d{4}-\d{2})$"))
    application.add_handler(CallbackQueryHandler(date_button, pattern="^\d{2}-\d{2}-\d{4}$"))
    application.add_handler(CallbackQueryHandler(back))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
