import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import ttk, messagebox
from sklearn.metrics import mean_absolute_error, mean_squared_error

GITHUB_TEST_XLSX_URL = "https://github.com/samoletpanfilov/reinforcement_task/raw/master/data/test.xlsx"
original_data = pd.read_excel(GITHUB_TEST_XLSX_URL)
predicted_data = pd.read_excel("test.xlsx")

original_data["dt"] = pd.to_datetime(original_data["dt"])
predicted_data["dt"] = pd.to_datetime(predicted_data["dt"])

merged_data = original_data[["dt", "–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"]].merge(
    predicted_data[["dt", "predicted_price", "N"]], on="dt", how="inner"
)

data_dict = merged_data.set_index("dt").to_dict("index")


def calculate_metrics():
    """–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –∏ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ"""
    selected_date = date_var.get()

    if not selected_date:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É!")
        return

    selected_date = pd.to_datetime(selected_date)

    if selected_date not in data_dict:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–î–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        return

    real_price = data_dict[selected_date]["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"]
    predicted_price = data_dict[selected_date]["predicted_price"]
    predicted_weeks = data_dict[selected_date]["N"]

    real_price_label.config(text=f"–†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {real_price:.2f} —Ä—É–±.")
    predicted_price_label.config(text=f"–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã: {predicted_price:.2f} —Ä—É–±.")
    predicted_weeks_label.config(text=f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–∞–∫—É–ø–∫–∏: {predicted_weeks:.0f} –Ω–µ–¥–µ–ª—å")

    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    y_true = merged_data["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"]
    y_pred_price = merged_data["predicted_price"]
    
    mae = mean_absolute_error(y_true, y_pred_price)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred_price))
    mape = np.mean(np.abs((y_true - y_pred_price) / y_true)) * 100

    mae_label.config(text=f"MAE: {mae:.2f}")
    rmse_label.config(text=f"RMSE: {rmse:.2f}")
    mape_label.config(text=f"MAPE: {mape:.2f}%")

    plt.figure(figsize=(12, 6))
    plt.plot(merged_data["dt"], y_true, label="–†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", marker="o")
    plt.plot(merged_data["dt"], y_pred_price, label="–ü—Ä–æ–≥–Ω–æ–∑", marker="s", linestyle="dashed")
    plt.axvline(selected_date, color='r', linestyle='--', label="–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞")
    plt.scatter([selected_date], [real_price], color='blue', s=100, zorder=3, label="–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    plt.scatter([selected_date], [predicted_price], color='green', s=100, zorder=3, label="–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶–µ–Ω–∞")
    plt.title("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.show()


root = tk.Tk()
root.title("–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É")
root.geometry("500x450")

# –í–∏–¥–∂–µ—Ç –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
tk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:").pack(pady=5)
date_var = tk.StringVar()
date_combobox = ttk.Combobox(root, textvariable=date_var, values=merged_data["dt"].astype(str).tolist())
date_combobox.pack(pady=5)

# –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
calculate_btn = tk.Button(root, text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", command=calculate_metrics)
calculate_btn.pack(pady=10)

# –ú–µ—Ç–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
real_price_label = tk.Label(root, text="–†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: -")
real_price_label.pack(pady=5)

predicted_price_label = tk.Label(root, text="–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã: -")
predicted_price_label.pack(pady=5)

predicted_weeks_label = tk.Label(root, text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å: -")
predicted_weeks_label.pack(pady=5)

mae_label = tk.Label(root, text="MAE: -")
mae_label.pack(pady=5)

rmse_label = tk.Label(root, text="RMSE: -")
rmse_label.pack(pady=5)

mape_label = tk.Label(root, text="MAPE: -")
mape_label.pack(pady=5)

root.mainloop()
