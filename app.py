import tkinter as tk
from tkinter import ttk
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = joblib.load("lightgbm_model.pkl")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
GITHUB_TEST_XLSX_URL = "test.xlsx"
data = pd.read_excel(GITHUB_TEST_XLSX_URL)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict_price():
    selected_date = date_entry.get()
    
    if selected_date:
        try:
            date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
            row = data[data["dt"] == date_obj]
            
            if row.empty:
                result_label.config(text="‚ö† –î–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
            features = row.drop(columns=["dt", "–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"]).values
            predicted_price = model.predict(features)[0]

            real_price = row["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"].values[0]
            weeks_recommendation = int(abs(real_price - predicted_price) // 1000)  # –£—Å–ª–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            result_label.config(text=(
                f"üìÖ –î–∞—Ç–∞: {selected_date}\n"
                f"‚úî –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {real_price:.2f} —Ä—É–±/—Ç\n"
                f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: {predicted_price:.2f} —Ä—É–±/—Ç\n"
                f"üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {weeks_recommendation} –Ω–µ–¥–µ–ª—å"
            ))

            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plot_graph(selected_date, real_price, predicted_price)

        except ValueError:
            result_label.config(text="‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å YYYY-MM-DD)")

# –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def plot_graph(selected_date, real_price, predicted_price):
    fig, ax = plt.subplots(figsize=(8, 4))

    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    ax.plot(data["dt"], data["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"], label="–†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", marker="o", color="blue")
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    ax.scatter([pd.to_datetime(selected_date)], [predicted_price], color="red", marker="s", label="–ü—Ä–æ–≥–Ω–æ–∑")
    
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É (—Ä—É–±/—Ç)")
    ax.set_title("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    ax.legend()
    ax.grid(True)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Tkinter
    canvas = FigureCanvasTkAgg(fig, master=window)
    canvas.draw()
    canvas.get_tk_widget().pack()

# –°–æ–∑–¥–∞–Ω–∏–µ GUI
window = tk.Tk()
window.title("–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É")
window.geometry("600x500")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
label = tk.Label(window, text="–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É", font=("Arial", 14))
label.pack(pady=10)

# –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
date_label = tk.Label(window, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:")
date_label.pack()

date_entry = ttk.Entry(window)
date_entry.pack()

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
predict_button = tk.Button(window, text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", command=predict_price)
predict_button.pack(pady=10)

# –†–µ–∑—É–ª—å—Ç–∞—Ç
result_label = tk.Label(window, text="", font=("Arial", 12), fg="green")
result_label.pack()

# –ö–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
graph_button = tk.Button(window, text="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", command=lambda: plot_graph(date_entry.get(), 0, 0))
graph_button.pack(pady=10)

window.mainloop()
